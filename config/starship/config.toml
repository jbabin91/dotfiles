"$schema" = "https://starship.rc/config-schema.json"

format = """
$username\
$kubernetes\
$directory\
${custom.git_host}\
$git_branch\
$git_commit\
$git_state\
$git_status\
$hg_branch\
$docker_context\
$package\
$cmake\
$dart\
$deno\
$dotnet\
$elixir\
$elm\
$erlang\
$golang\
$helm\
$java\
$julia\
$kotlin\
$nim\
$nodejs\
$ocaml\
$perl\
$php\
$purescript\
$python\
$red\
$ruby\
$rust\
$swift\
$terraform\
$vlang\
$vagrant\
$zig\
$nix_shell\
$conda\
$aws\
$gcloud\
$openstack\
$env_var\
$crystal\
$custom\
$cmd_duration\
$lua\
$line_break\
$jobs\
$character"""

scan_timeout = 10
add_newline = false
command_timeout = 10000

[battery]
disabled = true

[character]
success_symbol = "[ÔÑÖ](blue)"
error_symbol = "[ÔÑÖ](bright-red)"

[cmd_duration]
disabled = true
show_notifications = true
min_time_to_notify = 90_000

[directory]
truncation_length = 1
truncate_to_repo = true
format = "[Ôêì](blue) [$path]($style)[$read_only]($read_only_style)"
read_only = " ÔÄ£"
truncation_symbol = ""
fish_style_pwd_dir_length = 0

[git_branch]
format = " [$symbol$branch]($style)"
symbol = "Óú• "

[git_status]
format = '([$all_status$ahead_behind]($style))'
conflicted = ' \[Ô†π [$count](bright-white bold)\]'
ahead = ' \[[Ôïú ](bright-blue)[$count](bright-white bold)\]'
behind = ' \[[ÔïÑ ](white)[$count](bright-white bold)\]'
diverged = ' \[[Óú® ](purple)|[ ÔØÅ ](bright-blue)[$ahead_count](bright-white bold)[ ÔÆæ ](white)[$behind_count](bright-white)\]'
untracked = ' \[Ôäú [$count](bright-white bold)\]'
stashed = ' \[[Ô£ñ ](yellow)[$count](bright-white bold)\]'
modified = ' \[[Ôî¶ ](bright-yellow)[$count](bright-white bold)\]'
staged = ' \[[Ôëó ](bright-green)[$count](bright-white bold)\]'
renamed = ' \[[Ôëö ](bright-cyan)[$count](bright-white bold)\]'
deleted = ' \[ÔÄî [$count](bright-white bold)\]'

[python]
format = '[${symbol}${pyenv_prefix}(${version} )(\($virtualenv\) )]($style)'

[custom.git_host]
command = """
URL=$(command git ls-remote --get-url 2> /dev/null)
if [[ "$URL" =~ "github" ]]; then
    ICON="ÔÇõ "
elif [[ "$URL" =~ "gitlab" ]]; then
    ICON="Ôäñ "
elif [[ "$URL" =~ "bitbucket" ]];then
    ICON="ÔÖ± "
elif [[ "$URL" =~ "kernel" ]];then
    ICON="Óúí "
elif [[ "$URL" =~ "archlinux" ]];then
    ICON="ÔåÉ "
elif [[ "$URL" =~ "gnu" ]];then
    ICON="Óùπ "
elif [[ "$URL" =~ "git" ]];then
    ICON="ÓúÇ "
else
    ICON="Ôáí "
    URL="localhost"
fi
for PATTERN in "https" "http" "git" "://" "@"; do
    [[ "$URL" == "$PATTERN"* ]] && URL="${URL##$PATTERN}"
done
for PATTERN in "/" ".git"; do
    [[ "$URL" == *"$PATTERN" ]] && URL="${URL%%$PATTERN}"
done
printf "%s%s" "$ICON" "$URL"
"""
directories = [".git"]
when = 'git rev-parse --is-inside-work-tree 2> /dev/null'
shell = ["bash", "--norc", "--noprofile"]
style = "bright-yellow bold"
format = " [$output]($style)"

[hostname]
disabled = true

[aws]
format = " [$symbol$region]($style)"
disabled = true
[azure]
format = " [$symbol($subscription)]($style)"
disabled = true
[c]
format = " [$symbol($version(-$name))]($style)"
[cmake]
format = " [$symbol($version)]($style)"
[conda]
format = " [$symbol$environment]($style)"
[dart]
format = " [$symbol($version)]($style)"
[docker_context]
format = " [üêã $context](blue bold)"
[dotnet]
format = " [$symbol($version)(üéØ $tfm )]($style)"
[elixir]
format = " [$symbol($version (OTP $otp_version))]($style)"
[elm]
format = " [$symbol($version)]($style)"
[golang]
format = " [$symbol($version)]($style)"
[gcloud]
format = " [$symbol$account(@$domain)(($region))]($style)"
disabled = true
[haskell]
format = " [$symbol($version)]($style)"
[helm]
format = " [$symbol($version)]($style)"
[java]
format = " [$symbol($version)]($style)"
[julia]
format = " [$symbol($version)]($style)"
[kotlin]
format = " [$symbol($version)]($style)"
[kubernetes]
format = " [$symbol$context(($namespace))]($style)"
[lua]
format = " [$symbol($version)]($style)"
[nodejs]
format = " [$symbol($version)]($style)"
[package]
format = " [$symbol($version)]($style)"
[rust]
format = " [$symbol($version)]($style)"
