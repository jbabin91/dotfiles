[includeIf "gitdir:~/.code/github/"]
  path = ~/.gitconfig_personal
[includeIf "gitdir:~/.code/Work/"]
  path = ~/.gitconfig_work
# [url "wgh:tandemdiabetes"]
#   insteadOf = git@github.com:tandemdiabetes
[core]
  attributesfile = ~/.gitattributes
  autocrlf = input
  editor = nvim
	excludesfile = /Users/jacebabin/.gitignore
  ignorecase = false
	pager = less -x2
[color]
  ui = true
[alias]
  # http://gitready.com/intermediate/2009/02/12/easily-fetch-upstream-changes.html
  pu = !"git fetch origin -v; git fetch upstream -v; git merge upstream/main"
  # update submodules
  subup = !"git pull --recurse-submodules && git submodule update"
  # delete branches that have already been merged into the current branch
  rmmerged = !"git branch --merged | grep -v '*' | grep -v \"main\" | xargs -n 1 git branch -d && git remote prune origin"
  devrmmerged = !"git branch --merged | grep -v '*' | grep -v \"develop\" | xargs -n 1 git branch -d && git remote prune origin"
  count = shortlog -sn
  changedfiles = !sh -c 'git diff --name-only HEAD $(git merge-base HEAD main)' -
  change-commits = "!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch --env-filter \"if [[ \\\"$`echo $VAR`\\\" = '$OLD' ]]; then export $VAR='$NEW'; fi\" $@; }; f "
  track = !"git fetch origin && git branch $1 origin/$1 && git switch $1"

  #  Mostly from http://www.metacircus.com/hacking/2011/02/18/play-git-like-a-violin.html
  # I like using the interactive mode to make complex commits
  a = add --all
  ai = add --interactive

  # All the aliases relate to commits. Note that
  # they are grouped by common prefixes, so I don't
  # confuse what I want done by accident.
  c = commit
  # commit with a message
  cm = commit -m
  cma = commit -a -m
  # amending the previous commit
  ca = commit --amend
  caa = commit -a --amend -C HEAD

  # reset
  ## soft resets
  r = reset
  r1 = reset HEAD^
  r2 = reset HEAD^^
  ## hard resets
  rh = reset --hard
  rh1 = reset HEAD^ --hard
  rh1 = reset HEAD^^ --hard

  # shortcuts for commands
  b = branch
  co = checkout
  d = diff
  f = fetch
  m = merge
  mt = mergetool
  p = pull
  rp = git remote prune origin
  s = status -sb
  st = status
  sw = switch
  conflicts = diff --name-only --diff-filter=U

  changed = show --pretty=\"format:\" --name-only
  fm = fetch-merge
  g = grep --break --heading --line-number
  gi = grep --break --heading --line-number -i
  stash-popf = !sh -c 'git stash show -p | git apply && git stash drop'

	# Log
  l = log
	graph = log --graph --oneline
	log-yesterday = log --since=yesterday.midnight --oneline
  l1 = log --oneline
  lp = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  lg = log --graph --oneline --decorate --date=relative --all
  lt = log --tags --decorate --simplify-by-decoration --oneline
  lol = log --graph --decorate --pretty=oneline --abbrev-commit
  deleted = log --diff-filter=D --summary
  logs = log --show-signature

	# File changes
	## gen-ignore <lang>: Outputs a .gitignore file for `lang` from gitignore.io to stdout.
	gen-ignore = "!_gi() { curl -L -s https://www.gitignore.io/api/$@ ;}; _gi"
	## ignore/hard-ignore: See https://stackoverflow.com/a/13631525
	ignore = update-index --assume-unchanged
	unignore = update-index --no-assume-unchanged
	hard-ignore = update-index --skip-worktree
	hard-unignore = update-index --no-skip-worktree
	## ls-ignored: Lists files marked with assume-unchanged.
	ls-ignored = !git ls-files -v | grep '^[[:lower:]]' | cut -c 3-
	## ls-hard-ignored: Lists files marked with skip-worktree.
	ls-hard-ignored = !git ls-files -v | grep -i '^S' | cut -c 3-
	word-diff = diff --word-diff
	char-diff = diff --word-diff --word-diff-regex='([^[:alnum:]]|[^[:space:]])'
	## drop [stash_args...]: Like `reset HEAD`, but changes are recoverable from the stash reflog. Forwards arguments to `stash push`.
	drop = "!_drop() { git stash push \"$@\" && git stash drop; }; _drop"
	stat = status --short --branch

[grep]
  extendRegexp = true
  patternType = perl
	lineNumber = true
[push]
  default = current
  followTags = true
	autoSetupRemote = true
[pull]
	rebase = true
	ff = only
[rebase]
  autosquash = true
  autostash = true
  instructionFormat = %d %s (%cr) <%an>
  preserve-merges = true
[rerere]
  enable = true
  autoupdate = true
[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true
[difftool]
  prompt = false
  trustExitCode = true
[hub]
  protocol = ssh
[interactive]
  diffFilter = delta --color-only
[init]
  defaultBranch = main
[branch]
  sort = -committerdate # sort branches by last commit descending
[delta]
  features = line-numbers decorations
[help]
  autocorrect = 10
[diff "rspec"]
  xfuncname = "^[ \t]*((RSpec|describe|context|it|before|after|around|feature|scenario)[ \t].*)$"
[status]
  showUntackedFiles = all
[apply]
  whitespace = nowarn
[submodule]
  fetchJobs = 4
[commit]
	template = ~/.dotfiles/general/git/template.txt
[log]
  showSignature = false
[tag]
  forceSignAnnotated = false
[credential "https://github.com"]
	helper = 
	helper = !/opt/homebrew/bin/gh auth git-credential
[credential "https://gist.github.com"]
	helper = 
	helper = !/opt/homebrew/bin/gh auth git-credential
[fetch]
	prune = true
[merge]
	ff = false
  tool = code-insiders
[mergetool "code-insiders"]
  cmd = code-insiders --wait --merge $REMOTE $LOCAL $BASE $MERGED
[gpg "ssh"]
	allowedSignersFile = /Users/jacebabin/.config/git/allowed_signers
[user]
	email = jbabin91@gmail.com
	name = Jace Babin
